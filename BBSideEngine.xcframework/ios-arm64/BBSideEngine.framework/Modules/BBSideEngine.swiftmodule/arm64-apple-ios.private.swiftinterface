// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BBSideEngine
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AudioToolbox
@_exported import BBSideEngine
import CoreLocation
import CoreMotion
import CryptoKit
import Darwin
import Foundation
import MapKit
import Network
import Swift
import SystemConfiguration
import TensorFlowLiteC
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
public struct Tensor : Swift.Equatable, Swift.Hashable {
  public let name: Swift.String
  public let dataType: BBSideEngine.Tensor.DataType
  public let shape: BBSideEngine.Tensor.Shape
  public let data: Foundation.Data
  public let quantizationParameters: BBSideEngine.QuantizationParameters?
  public static func == (a: BBSideEngine.Tensor, b: BBSideEngine.Tensor) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BBSideEngine.Tensor {
  public enum DataType : Swift.Equatable, Swift.Hashable {
    case bool
    case uInt8
    case int16
    case int32
    case int64
    case float16
    case float32
    case float64
    public static func == (a: BBSideEngine.Tensor.DataType, b: BBSideEngine.Tensor.DataType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension BBSideEngine.Tensor {
  public struct Shape : Swift.Equatable, Swift.Hashable {
    public let rank: Swift.Int
    public let dimensions: [Swift.Int]
    public init(_ dimensions: [Swift.Int])
    public init(_ elements: Swift.Int...)
    public static func == (a: BBSideEngine.Tensor.Shape, b: BBSideEngine.Tensor.Shape) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension BBSideEngine.Tensor.Shape : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral: Swift.Int...)
  public typealias ArrayLiteralElement = Swift.Int
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BBPermissionHelper : ObjectiveC.NSObject {
  public typealias BBPermission = ([Swift.String : Any]) -> Swift.Void
  public func permissionEventsHandler(handler: @escaping BBSideEngine.BBPermissionHelper.BBPermission)
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class Interpreter {
  final public let options: BBSideEngine.Interpreter.Options?
  final public let delegates: [BBSideEngine.Delegate]?
  final public var inputTensorCount: Swift.Int {
    get
  }
  final public var outputTensorCount: Swift.Int {
    get
  }
  final public var signatureKeys: [Swift.String] {
    get
  }
  convenience public init(modelPath: Swift.String, options: BBSideEngine.Interpreter.Options? = nil, delegates: [BBSideEngine.Delegate]? = nil) throws
  convenience public init(modelData: Foundation.Data, options: BBSideEngine.Interpreter.Options? = nil, delegates: [BBSideEngine.Delegate]? = nil) throws
  @objc deinit
  final public func invoke() throws
  final public func input(at index: Swift.Int) throws -> BBSideEngine.Tensor
  final public func output(at index: Swift.Int) throws -> BBSideEngine.Tensor
  final public func resizeInput(at index: Swift.Int, to shape: BBSideEngine.Tensor.Shape) throws
  @discardableResult
  final public func copy(_ data: Foundation.Data, toInputAt index: Swift.Int) throws -> BBSideEngine.Tensor
  final public func allocateTensors() throws
  final public func signatureRunner(with key: Swift.String) throws -> BBSideEngine.SignatureRunner
}
extension BBSideEngine.Interpreter {
  public struct Options : Swift.Equatable, Swift.Hashable {
    public var threadCount: Swift.Int?
    public var isXNNPackEnabled: Swift.Bool
    public init()
    public static func == (a: BBSideEngine.Interpreter.Options, b: BBSideEngine.Interpreter.Options) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@available(*, deprecated, renamed: "Interpreter.Options")
public typealias InterpreterOptions = BBSideEngine.Interpreter.Options
public enum Runtime {
  public static var version: Swift.String {
    get
  }
}
@objc public enum BBMode : Swift.Int {
  case sandbox
  case production
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BBSideEngineMode : Swift.Int {
  case test
  case live
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BBTheme : Swift.Int {
  case custom
  case standard
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum BBSideOperation : Swift.Int {
  case none
  case configure
  case start
  case stop
  case sms
  case email
  case incidentDetected
  case incidentCancel
  case incidentAlertSent
  case incidentVerifiedByUser
  case timerStarted
  case timerFinished
  case location
  case openVideoSurvey
  case closeVideoSurvey
  case incidentAutoCancel
  case resumeSideEngine
  case sosActive
  case sosDeActive
  case startFlareAware
  case stopFlareAware
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class BBResponse : ObjectiveC.NSObject {
  @objc public var success: Swift.Bool
  @objc public var type: BBSideEngine.BBSideOperation
  @objc public var payload: [Swift.String : Any]?
  @objc deinit
}
public enum SignatureRunnerError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToCreateSignatureRunner(signatureKey: Swift.String)
  case failedToGetTensor(tensorType: Swift.String, nameInSignature: Swift.String)
  case failedToResizeInputTensor(inputName: Swift.String)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case failedToInvokeSignature(signatureKey: Swift.String)
  case allocateTensorsRequired
  public static func == (a: BBSideEngine.SignatureRunnerError, b: BBSideEngine.SignatureRunnerError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BBSideEngine.SignatureRunnerError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BBSideEngine.SignatureRunnerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol Delegate : AnyObject {
  typealias CDelegate = Swift.UnsafeMutablePointer<TensorFlowLiteC.TfLiteDelegate>
  var cDelegate: Self.CDelegate { get }
}
public struct QuantizationParameters : Swift.Equatable, Swift.Hashable {
  public let scale: Swift.Float
  public let zeroPoint: Swift.Int
  public static func == (a: BBSideEngine.QuantizationParameters, b: BBSideEngine.QuantizationParameters) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class BBSideEngineManager : ObjectiveC.NSObject {
  public typealias callbackHelper = (BBSideEngine.BBResponse) -> Swift.Void
  @objc public var completion: BBSideEngine.BBSideEngineManager.callbackHelper?
  @objc public static let shared: BBSideEngine.BBSideEngineManager
  @objc public var applicationTheme: BBSideEngine.BBTheme
  @objc public var enableActivityTelemetry: Swift.Bool
  @objc public var applicationLicenseKey: Swift.String
  @objc public var surveyVideoURL: Swift.String
  @objc public var countDownDuration: Swift.Int
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var contentTextColor: UIKit.UIColor
  @objc public var swipeToCancelTextColor: UIKit.UIColor
  @objc public var swipeToCancelBackgroundColor: UIKit.UIColor
  @objc public var riderName: Swift.String
  @objc public var riderEmail: Swift.String
  @objc public var riderId: Swift.String
  @objc public var impactBody: Swift.String
  @objc public var impactBodySOS: Swift.String
  @objc public var showLog: Swift.Bool
  @objc public var appName: Swift.String
  @objc public var activity: Swift.String
  @objc public var enable_flare_aware_network: Swift.Bool
  @objc public var low_frequency_intervals_seconds: Swift.Int
  @objc public var high_frequency_intervals_seconds: Swift.Int
  @objc public var high_frequency_mode_enabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var distance_filter_meters: Swift.Double
  @objc override dynamic public init()
  @objc deinit
  @objc public func configure(accessKey: Swift.String, mode: BBSideEngine.BBMode, theme: BBSideEngine.BBTheme)
}
extension BBSideEngine.BBSideEngineManager {
  @objc dynamic public func startSideEngine()
  @objc dynamic public func stopSideEngine()
  @objc dynamic public func activeSOS()
  @objc dynamic public func startFlareAware()
  @objc dynamic public func stopFlareAware()
  @objc dynamic public func deActiveSOS()
}
extension BBSideEngine.BBSideEngineManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func fetchCurrentLocation() -> CoreLocation.CLLocation?
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: Swift.Error)
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
}
extension BBSideEngine.BBSideEngineManager {
  @objc dynamic public func resumeSideEngine()
  @objc dynamic public func presentVideoSurveys()
}
extension BBSideEngine.BBSideEngineManager {
  @objc dynamic public func sideEventsListener(handler: @escaping BBSideEngine.BBSideEngineManager.callbackHelper)
}
extension BBSideEngine.BBSideEngineManager {
  @objc dynamic public func sendSMS(contact: [Swift.String : Any])
  @objc dynamic public func sendSMS(contacts: Foundation.NSArray)
  @objc dynamic public func sendEmail(toEmail: Swift.String)
  @objc dynamic public func sendError(error: Swift.String)
  @objc dynamic public func fetchWhat3WordLocation(completion: @escaping ([Swift.String : Any]) -> ())
  @objc dynamic public func notifyPartner()
  @objc dynamic public func declineIncident()
  @objc dynamic public func isConnectedToNetwork() -> Swift.Bool
}
public class BBViews {
  public static let shared: BBSideEngine.BBViews
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SignatureRunner {
  final public let signatureKey: Swift.String
  final public var inputs: [Swift.String] {
    get
  }
  final public var outputs: [Swift.String] {
    get
  }
  @objc deinit
  final public func invoke(with inputs: [Swift.String : Foundation.Data]) throws
  final public func input(named name: Swift.String) throws -> BBSideEngine.Tensor
  final public func output(named name: Swift.String) throws -> BBSideEngine.Tensor
  final public func resizeInput(named name: Swift.String, toShape shape: BBSideEngine.Tensor.Shape) throws
  final public func copy(_ data: Foundation.Data, toInputNamed name: Swift.String) throws
  final public func allocateTensors() throws
}
public enum InterpreterError : Swift.Error, Swift.Equatable, Swift.Hashable {
  case invalidTensorIndex(index: Swift.Int, maxIndex: Swift.Int)
  case invalidTensorDataCount(provided: Swift.Int, required: Swift.Int)
  case invalidTensorDataType
  case failedToLoadModel
  case failedToCreateInterpreter
  case failedToResizeInputTensor(index: Swift.Int)
  case failedToCopyDataToInputTensor
  case failedToAllocateTensors
  case allocateTensorsRequired
  case invokeInterpreterRequired
  case tensorFlowLiteError(Swift.String)
  public static func == (a: BBSideEngine.InterpreterError, b: BBSideEngine.InterpreterError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BBSideEngine.InterpreterError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
extension BBSideEngine.InterpreterError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension BBSideEngine.BBMode : Swift.Equatable {}
extension BBSideEngine.BBMode : Swift.Hashable {}
extension BBSideEngine.BBMode : Swift.RawRepresentable {}
extension BBSideEngine.BBSideEngineMode : Swift.Equatable {}
extension BBSideEngine.BBSideEngineMode : Swift.Hashable {}
extension BBSideEngine.BBSideEngineMode : Swift.RawRepresentable {}
extension BBSideEngine.BBTheme : Swift.Equatable {}
extension BBSideEngine.BBTheme : Swift.Hashable {}
extension BBSideEngine.BBTheme : Swift.RawRepresentable {}
extension BBSideEngine.BBSideOperation : Swift.Equatable {}
extension BBSideEngine.BBSideOperation : Swift.Hashable {}
extension BBSideEngine.BBSideOperation : Swift.RawRepresentable {}
